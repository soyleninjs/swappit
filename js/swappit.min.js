class Swappit{static instances=new Map;constructor(t,e=!1){if(!t)throw new Error("Swappit: Error - El parámetro handle es obligatorio");if(Swappit.instances.has(t))throw new Error(`Swappit: Error - El handle "${t}" ya está en uso. Utilice un identificador diferente.`);this.handle=t,this.log=e,Swappit.instances.set(this.handle,this),this.contentsCache={},this._logMessage("Nueva instancia creada","info")}_logMessage(t,e="info"){if(!this.log)return;const a={info:"#3498db",success:"#2ecc71",warning:"#f39c12",error:"#e74c3c"},s=a[e]||a.info,i=`%cSwappit [${this.handle}]:`;console.log(i,`color: ${s}; font-weight: bold;`,t)}_handleCustomEvent(t,e){const a=`swappit:${this.handle}:${t}`;window.dispatchEvent(new window.CustomEvent(a,{detail:{handle:this.handle,url:e}}))}async _getContent(t,e=!0){if(t&&(t.startsWith("/")||t.startsWith("./"))){if(!e||!this.contentsCache[t]){const e=await window.fetch(t),a=await e.text();this.contentsCache[t]=(new window.DOMParser).parseFromString(a,"text/html"),this._logMessage(`Contenido precargado de ${t}`,"success")}}else this._logMessage(`La URL "${t}" no es válida. Solo se permiten rutas internas relativas.`,"error")}_updateElements(t){const e=Array.from(document.querySelectorAll(`[data-${this.handle}-update]`)),a=e.filter((t=>t.hasAttribute(`data-${this.handle}-update-order`))),s=e.filter((t=>!t.hasAttribute(`data-${this.handle}-update-order`)));a.sort(((t,e)=>window.parseInt(t.getAttribute(`data-${this.handle}-update-order`))-window.parseInt(e.getAttribute(`data-${this.handle}-update-order`))));[...s,...a].forEach((e=>{const a=e.getAttribute(`data-${this.handle}-update`);t.querySelectorAll(`[data-${this.handle}-update="${a}"]`).forEach((t=>{if(null==t)return void e.classList.add("hidden");const a=t.cloneNode(!0);a.querySelectorAll("noscript").forEach((t=>{t.textContent=t.innerHTML})),e.replaceWith(a)}))}))}async preloadContents(t){const e=[...new Set(t)];Array.isArray(e)&&0!==e.length?(await Promise.all(e.map((t=>this._getContent(t)))),this._logMessage(`Precarga completada para ${e.length} URL(s)`,"success")):this._logMessage("preloadContents requiere un array de URLs no vacío","warning")}async update(t,e=!0){this._handleCustomEvent("beforeUpdate",t),await this._getContent(t,e),this._updateElements(this.contentsCache[t]),this._logMessage(`Elementos actualizados del contenido de ${t}`,"success"),this._handleCustomEvent("afterUpdate",t)}static updateScriptByContent(t){t.forEach((t=>{const e=document.createElement("script");e.textContent=t.textContent,t.replaceWith(e)}))}static updateScriptBySrc(t){document.querySelectorAll(`script[src*="${t}"]`).forEach((t=>{const e=document.createElement("script");e.src=`${t.src}?timestamp=${(new Date).getTime()}`,t.replaceWith(e)}))}}window.Swappit=Swappit,"undefined"!=typeof module&&void 0!==module.exports&&(module.exports=Swappit);class SwappitButton extends HTMLElement{connectedCallback(){if(this.anchor=this.querySelector("a"),!this.anchor||this.children.length>1)return void console.error("SwappitButton: Debe contener un único <a> como hijo.");if(this.url=this.anchor.getAttribute("href"),!this.url)return void console.error("SwappitButton: El <a> dentro del componente debe tener un atributo href válido.");if(!this.url.startsWith("/")&&!this.url.startsWith("./"))return void console.error("SwappitButton: Solo se permiten rutas internas relativas (href debe empezar con '/' o './').");if(this.handle=this.dataset.handle,!this.handle)return void console.error("SwappitButton: El atributo data-handle es obligatorio.");const t="true"===this.dataset.log;Swappit.instances.has(this.handle)?(this.swappit=Swappit.instances.get(this.handle),t&&(this.swappit.log=!0,this.swappit._logMessage("Log activado dinámicamente por <swappit-button>","info"))):(this.swappit=new Swappit(this.handle,t),t&&this.swappit._logMessage("Log activado dinámicamente por <swappit-button>","info"));const e=!this.hasAttribute("data-preload")||"true"===this.dataset.preload;this.loadFromCache=!this.hasAttribute("data-load-from-cache")||"true"===this.dataset.loadFromCache,e&&this.swappit.preloadContents([this.url]),this.handleEvents()}handleEvents(){this._onClickHandler=t=>{t.preventDefault(),this.swappit.update(this.url,this.loadFromCache)},this.addEventListener("click",this._onClickHandler)}disconnectedCallback(){this._onClickHandler&&this.anchor&&this.removeEventListener("click",this._onClickHandler)}}window.customElements.get("swappit-button")||window.customElements.define("swappit-button",SwappitButton);